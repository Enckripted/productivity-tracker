create table if not exists tasks(
    id bigint primary key generated by default as identity,
    user_id uuid default auth.uid() references auth.users(id) not null,
    name text not null,
    color text not null,
    seconds_worked bigint default 0 not null,
    seconds_worked_today bigint default 0 not null
);

alter table tasks enable row level security;

create policy "Users can view their own tasks."
on tasks for select
to authenticated
using ((select auth.uid()) = user_id);

create policy "Users can create their own tasks."
on tasks for insert
to authenticated
with check ((select auth.uid()) = user_id);

create policy "Users can update their own tasks."
on tasks for update
to authenticated
using ((select auth.uid()) = user_id)
with check ((select auth.uid()) = user_id);

create policy "Users can delete their own tasks."
on tasks for delete
to authenticated
using ((select auth.uid()) = user_id);

create or replace function add_seconds_to_task(task_id bigint, seconds bigint)
returns table (
    seconds_worked bigint,
    seconds_worked_today bigint
) as $$
begin
    return query
    update tasks
    set
        seconds_worked = tasks.seconds_worked + seconds,
        seconds_worked_today = tasks.seconds_worked_today + seconds
    where id = task_id
    returning tasks.seconds_worked, tasks.seconds_worked_today;
end;
$$ language plpgsql;