
  create table "public"."tasks" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null default auth.uid(),
    "name" text not null,
    "color" text not null,
    "seconds_worked" bigint not null default 0,
    "seconds_worked_today" bigint not null default 0
      );


alter table "public"."tasks" enable row level security;


  create table "public"."users" (
    "id" uuid not null,
    "working_task" bigint default '-1'::integer,
    "working_start" timestamp with time zone not null default '2000-01-01 00:00:00+00'::timestamp with time zone,
    "day_running" boolean not null default false,
    "day_start" timestamp with time zone not null default '2000-01-01 00:00:00+00'::timestamp with time zone
      );


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX tasks_pkey ON public.tasks USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."tasks" add constraint "tasks_pkey" PRIMARY KEY using index "tasks_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."tasks" add constraint "tasks_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."tasks" validate constraint "tasks_user_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.add_seconds_to_task(task_id bigint, seconds bigint)
 RETURNS TABLE(seconds_worked bigint, seconds_worked_today bigint)
 LANGUAGE plpgsql
AS $function$
begin
    return query
    update tasks
    set
        seconds_worked = tasks.seconds_worked + seconds,
        seconds_worked_today = tasks.seconds_worked_today + seconds
    where id = task_id
    returning tasks.seconds_worked, tasks.seconds_worked_today;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin 
    insert into public.users (id) values (new.id);
    insert into public.tasks (user_id, name, color) values
    (new.id, 'Idling', '#008FFF');
    return new;
end;
$function$
;

grant delete on table "public"."tasks" to "anon";

grant insert on table "public"."tasks" to "anon";

grant references on table "public"."tasks" to "anon";

grant select on table "public"."tasks" to "anon";

grant trigger on table "public"."tasks" to "anon";

grant truncate on table "public"."tasks" to "anon";

grant update on table "public"."tasks" to "anon";

grant delete on table "public"."tasks" to "authenticated";

grant insert on table "public"."tasks" to "authenticated";

grant references on table "public"."tasks" to "authenticated";

grant select on table "public"."tasks" to "authenticated";

grant trigger on table "public"."tasks" to "authenticated";

grant truncate on table "public"."tasks" to "authenticated";

grant update on table "public"."tasks" to "authenticated";

grant delete on table "public"."tasks" to "service_role";

grant insert on table "public"."tasks" to "service_role";

grant references on table "public"."tasks" to "service_role";

grant select on table "public"."tasks" to "service_role";

grant trigger on table "public"."tasks" to "service_role";

grant truncate on table "public"."tasks" to "service_role";

grant update on table "public"."tasks" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";


  create policy "Users can create their own tasks."
  on "public"."tasks"
  as permissive
  for insert
  to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));



  create policy "Users can delete their own tasks."
  on "public"."tasks"
  as permissive
  for delete
  to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



  create policy "Users can update their own tasks."
  on "public"."tasks"
  as permissive
  for update
  to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));



  create policy "Users can view their own tasks."
  on "public"."tasks"
  as permissive
  for select
  to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



  create policy "Users can update their own profiles."
  on "public"."users"
  as permissive
  for update
  to public
using ((( SELECT auth.uid() AS uid) = id))
with check ((( SELECT auth.uid() AS uid) = id));



  create policy "Users can view their own profiles."
  on "public"."users"
  as permissive
  for select
  to public
using ((( SELECT auth.uid() AS uid) = id));


CREATE TRIGGER on_user_creation AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


